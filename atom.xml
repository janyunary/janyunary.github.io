<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>之禹的小匣子</title>
  
  <subtitle>知我者谓我心忧</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-02T02:40:47.772Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>之禹</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式四大原则</title>
    <link href="http://example.com/2022/03/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9B%9B%E5%A4%A7%E5%8E%9F%E5%88%99/"/>
    <id>http://example.com/2022/03/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%9B%9B%E5%A4%A7%E5%8E%9F%E5%88%99/</id>
    <published>2022-03-31T08:06:05.000Z</published>
    <updated>2022-04-02T02:40:47.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1. 单一职责原则"></a>1. 单一职责原则</h2><p><strong>就一个类而言，应该仅有一个引起它变化的原因。</strong></p><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能回削弱或者抑制这个类完成其它职责的能力。这种强耦合会导致脆弱的设计，当变化发生时，设计会遭受到意向不到的破坏。</p><p>软件真正要做的许多内容，就是发现职责并把那些职责相互分离，如果有多余一个的动机去改变一个类，那么这个类就具有多于一个的职责。</p><h3 id="1-1-单一职责原则优点"><a href="#1-1-单一职责原则优点" class="headerlink" title="1.1 单一职责原则优点"></a>1.1 单一职责原则优点</h3><ol><li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li><li>提高类的可读性。复杂性降低，自然其可读性会提高。</li><li>提高系统的可维护性。可读性提高，那自然更容易维护了。</li><li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</li></ol><h2 id="2-开放-封闭原则"><a href="#2-开放-封闭原则" class="headerlink" title="2. 开放-封闭原则"></a>2. 开放-封闭原则</h2><p><strong>软件实体（类、模板、函数等等）应该可以扩展，但是不可修改。</strong></p><p>当系统需求发生改变时，尽量不修改系统原有代码功能，应该扩展模块的功能，来实现新的需求。</p><p>面对需求，对程序的改动时通过增加新代码进行的，而不是更改现有的代码。</p><p>绝对的对修改关闭时不可能的，无论模块时多么的封闭，都会存在一些无法对之封闭的变化。既然不可能完全封闭，设计人员必须对于他设计的模块应该对哪种变化封闭做出选择。他必须先猜测除最有可能发生的变化种类，然后构造抽象来隔离那些变化。</p><p>在最初编写代码时，假设变化不会发生。当变化发生时，我们就创建抽象来隔离以后发生的同类变化。</p><p>开放-封闭原则时面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处，即<strong>可维护、可扩展、可复用、灵活性好</strong>。开发人员应该仅对程序中呈现除频繁变化的那些部分做出抽象，对于应用程序中的每个部分都刻意进行抽象同样不是一个好主意。<strong>拒绝不成熟的抽象和抽象本身一样重要</strong></p><h3 id="2-1-开放-封闭原则优点"><a href="#2-1-开放-封闭原则优点" class="headerlink" title="2.1 开放-封闭原则优点"></a>2.1 开放-封闭原则优点</h3><ol><li>提高代码的可复用性。在粒度小的功能模块上进行扩展，有助于代码的复用性；我们在开发前就要预想未来可能存在的扩展，并为此留有扩展空间。</li><li>提高系统的稳定性和可维护性。不修改原有代码有助于系统稳定性，以扩展的方式开发新功能有助于快速开发与维护。</li><li>提高软件测试的友好性。以拓展的方式开发功能，不会影响原有功能，有利于加快测试进度。</li></ol><h2 id="3-依赖倒转原则"><a href="#3-依赖倒转原则" class="headerlink" title="3. 依赖倒转原则"></a>3. 依赖倒转原则</h2><p><strong>A. 高层模块不应该依赖低层模块，两个都应该依赖抽象。</strong></p><p><strong>B. 抽象不应该依赖细节，细节应该依赖抽象</strong></p><p>即针对接口编程，不要对实现编程</p><h3 id="3-1-依赖倒转原则优点"><a href="#3-1-依赖倒转原则优点" class="headerlink" title="3.1 依赖倒转原则优点"></a>3.1 依赖倒转原则优点</h3><ol><li>依赖倒置原则可以降低类间的耦合性。</li><li>依赖倒置原则可以提高系统的稳定性。</li><li>依赖倒置原则可以减少并行开发引起的风险。</li><li>依赖倒置原则可以提高代码的可读性和可维护性。</li></ol><h2 id="4-里氏代换原则"><a href="#4-里氏代换原则" class="headerlink" title="4. 里氏代换原则"></a>4. 里氏代换原则</h2><p><strong>子类型必须能够替换掉它们的夫类型</strong></p><p><strong>继承必须确保超类所拥有的性质在子类中仍然成立</strong></p><p>LSP原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该 使用继承，以及其中蕴含的原理。里氏替换原则是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范。</p><p>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><p>根据上述理解，对里氏替换原则的定义可以总结如下：</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li><li>子类中可以增加自己特有的方法</li><li>当子类的方法重载父类的方法时，方法的前置条件按（即方法的输入参数）要比父类的方法更宽松</li><li>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的输出/返回值）要比父类的方法更严格或相等</li></ul><p>通过重写父类的方法来完成新的功能写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>如果违背了里氏替换原则，则继承类的队形在基类出现的地方会出现运行错误，这是其修正方法是：取消原来的继承关系，重新设计它们之间的关系。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-单一职责原则&quot;&gt;&lt;a href=&quot;#1-单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;1. 单一职责原则&quot;&gt;&lt;/a&gt;1. 单一职责原则&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;就一个类而言，应该仅有一个引起它变化的原因。&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式二-策略模式</title>
    <link href="http://example.com/2022/03/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-30T01:02:29.000Z</published>
    <updated>2022-03-31T08:03:19.024Z</updated>
    
    <content type="html"><![CDATA[<p>声明：</p><p>所有设计模式均是学习借鉴自《大话设计模式》</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>它定义了算法家族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p><p>策略模式是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，可以以相同的方式调用所有所有算法，<strong>减少各种算法类之间的耦合</strong>。</p><p><strong>简化单元测试</strong></p><p><strong>策略模式封装了变化，分析发现需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的变化性。</strong></p><h3 id="策略模式结构图"><a href="#策略模式结构图" class="headerlink" title="策略模式结构图"></a>策略模式结构图</h3><p><img src="/2022/03/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E7%BB%93%E6%9E%84%E5%9B%BE.jpg"></p><h3 id="策略模式通用代码"><a href="#策略模式通用代码" class="headerlink" title="策略模式通用代码"></a>策略模式通用代码</h3><h4 id="Strategy类"><a href="#Strategy类" class="headerlink" title="Strategy类"></a>Strategy类</h4><p>定义所有支持的算法的公共接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//抽象算法类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Strategy</span></span>&#123;<br>    <span class="hljs-comment">//算法方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AlgorithmInterface</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ConcreteStrategyX类"><a href="#ConcreteStrategyX类" class="headerlink" title="ConcreteStrategyX类"></a>ConcreteStrategyX类</h4><p>封装了具体的算法或行为，继承于Strategy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//具体算法A</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteStrategyA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Strategy</span></span>&#123;<br>    <span class="hljs-comment">//算法A实现方法</span><br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AlgorithmInterface</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;算法A实现&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//具体算法B</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteStrategyA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Strategy</span></span>&#123;<br>    <span class="hljs-comment">//算法B实现方法</span><br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AlgorithmInterface</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;算法B实现&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//具体算法C</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteStrategyA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Strategy</span></span>&#123;<br>    <span class="hljs-comment">//算法C实现方法</span><br>    <span class="hljs-meta">@override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AlgorithmInterface</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;算法C实现&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Context类"><a href="#Context类" class="headerlink" title="Context类"></a>Context类</h4><p>用一个ConcreteStrategy来配置，维护一个对Strategy对象的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//上下文</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span></span>&#123;<br>    Strategy strategy;<br>    <span class="hljs-comment">//初始化时，传入具体的策略对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Context</span><span class="hljs-params">(Strategy strategy)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.strategy = strategy;<br>    &#125;<br>    <br>    <span class="hljs-comment">//上下文接口</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ContextInterface</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//根据具体的策略对象，调用其算法的方法</span><br>        <span class="hljs-keyword">this</span>.strategy.AlgorithmInterface();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        Context context;<br>        <br>        <span class="hljs-comment">//由于实例化不同的策略，所以最终在调用context.ContextInterface()时，所获得的结果就不尽相同。</span><br>        context = <span class="hljs-keyword">new</span> Context(<span class="hljs-keyword">new</span> ConcreteStrategyyA());<br>        context.ContextInterface();<br>        <br>        context = <span class="hljs-keyword">new</span> Context(<span class="hljs-keyword">new</span> ConcreteStrategyyB());<br>        context.ContextInterface();<br>        <br>        context = <span class="hljs-keyword">new</span> Context(<span class="hljs-keyword">new</span> ConcreteStrategyyC());<br>        context.ContextInterface();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实例——超市收银系统"><a href="#实例——超市收银系统" class="headerlink" title="实例——超市收银系统"></a>实例——超市收银系统</h2><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="/2022/03/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8FUML.jpg"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="CashSuper类"><a href="#CashSuper类" class="headerlink" title="CashSuper类"></a>CashSuper类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CashSuper</span> </span>&#123;<br><span class="hljs-comment">//    现金收取超类的抽象方法，收取现金，参数为原价，返回为当前价</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">double</span> <span class="hljs-title">acceptCash</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CashNormal类"><a href="#CashNormal类" class="headerlink" title="CashNormal类"></a>CashNormal类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 正常收费子类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CashNormal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CashSuper</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">acceptCash</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br><span class="hljs-comment">//        正常收费，原价返回</span><br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CashRebate类"><a href="#CashRebate类" class="headerlink" title="CashRebate类"></a>CashRebate类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 打折收费子类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CashRebate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CashSuper</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> moneyRebate = <span class="hljs-number">1d</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CashRebate</span><span class="hljs-params">(String moneyRebate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.moneyRebate = Double.parseDouble(moneyRebate);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">acceptCash</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> money * moneyRebate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CashReturn类"><a href="#CashReturn类" class="headerlink" title="CashReturn类"></a>CashReturn类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 返利收费子类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CashReturn</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CashSuper</span> </span>&#123;<br>    <span class="hljs-comment">//    返利收费，满moneyCondition返moneyReturn</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> moneyCondition = <span class="hljs-number">0.0d</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> moneyReturn = <span class="hljs-number">0.0d</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CashReturn</span><span class="hljs-params">(String moneyCondition, String moneyReturn)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.moneyCondition = Double.parseDouble(moneyCondition);<br>        <span class="hljs-keyword">this</span>.moneyReturn = Double.parseDouble(moneyReturn);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">acceptCash</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> result = money;<br>        <span class="hljs-keyword">if</span> (money &gt; moneyCondition) &#123;<br>            result = money - Math.floor(money / moneyCondition) * moneyReturn;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CashContext类"><a href="#CashContext类" class="headerlink" title="CashContext类"></a>CashContext类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CashContext</span> </span>&#123;<br>    CashSuper cashSuper;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CashContext</span><span class="hljs-params">(CashSuper cashSuper)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cashSuper = cashSuper;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cashSuper.acceptCash(money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        CashContext cashContext = <span class="hljs-keyword">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;请输入打折方式&quot;</span>);<br>        <span class="hljs-keyword">switch</span> (scanner.nextLine()) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;正常收费&quot;</span>:<br>                cashContext = <span class="hljs-keyword">new</span> CashContext(<span class="hljs-keyword">new</span> CashNormal());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;满300返100&quot;</span>:<br>                cashContext = <span class="hljs-keyword">new</span> CashContext(<span class="hljs-keyword">new</span> CashReturn(<span class="hljs-string">&quot;300&quot;</span>, <span class="hljs-string">&quot;100&quot;</span>));<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;打8折&quot;</span>:<br>                cashContext = <span class="hljs-keyword">new</span> CashContext(<span class="hljs-keyword">new</span> CashRebate(<span class="hljs-string">&quot;0.8&quot;</span>));<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br><br>        <span class="hljs-keyword">double</span> total = <span class="hljs-number">0.0d</span>;<br>        <span class="hljs-keyword">double</span> totalprice = <span class="hljs-number">0.0d</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入商品单价&quot;</span>);<br>            <span class="hljs-keyword">double</span> price = scanner.nextDouble();<br>            System.out.println(<span class="hljs-string">&quot;输入商品数量&quot;</span>);<br>            <span class="hljs-keyword">double</span> num = scanner.nextDouble();<br>            totalprice = cashContext.getResult(price * num);<br>            total = totalprice + total;<br><br>        &#125; <span class="hljs-keyword">while</span> (!scanner.nextLine().equals(<span class="hljs-string">&quot;done&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="策略与简单工厂结合"><a href="#策略与简单工厂结合" class="headerlink" title="策略与简单工厂结合"></a>策略与简单工厂结合</h3><p>从这里代码可以看到，我们又将判断使用哪一个算法交回给了客户端。所以，试着将策略模式与简单工厂模式相结合。</p><h4 id="修改后的CashContext类"><a href="#修改后的CashContext类" class="headerlink" title="修改后的CashContext类"></a>修改后的CashContext类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CashContext</span> </span>&#123;<br>    CashSuper cashSuper;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CashContext</span><span class="hljs-params">(String type)</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span> (type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;正常收费&quot;</span>:<br>                cashSuper = <span class="hljs-keyword">new</span> CashNormal();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;满300返100&quot;</span>:<br>                cashSuper = <span class="hljs-keyword">new</span> CashReturn(<span class="hljs-string">&quot;300&quot;</span>,<span class="hljs-string">&quot;100&quot;</span>);;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;打8折&quot;</span>:<br>                cashSuper = <span class="hljs-keyword">new</span> CashRebate(<span class="hljs-string">&quot;0.8&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.cashSuper = cashSuper;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cashSuper.acceptCash(money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="修改后的客户端代码"><a href="#修改后的客户端代码" class="headerlink" title="修改后的客户端代码"></a>修改后的客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        CashContext cashContext = <span class="hljs-keyword">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;请输入打折方式&quot;</span>);<br>        cashContext = <span class="hljs-keyword">new</span> CashContext(scanner.nextLine());<br><br><br>        <span class="hljs-keyword">double</span> total = <span class="hljs-number">0.0d</span>;<br>        <span class="hljs-keyword">double</span> totalprice = <span class="hljs-number">0.0d</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;输入商品单价&quot;</span>);<br>            <span class="hljs-keyword">double</span> price = scanner.nextDouble();<br>            System.out.println(<span class="hljs-string">&quot;输入商品数量&quot;</span>);<br>            <span class="hljs-keyword">double</span> num = scanner.nextDouble();<br>            totalprice = cashContext.getResult(price * num);<br>            total = totalprice + total;<br><br>        &#125; <span class="hljs-keyword">while</span> (!scanner.nextLine().equals(<span class="hljs-string">&quot;done&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;声明：&lt;/p&gt;
&lt;p&gt;所有设计模式均是学习借鉴自《大话设计模式》&lt;/p&gt;
&lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;p&gt;它定义了算法家族，分别封装起来，让他们之间可</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式一-简单工厂模式</title>
    <link href="http://example.com/2022/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2022/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-29T09:01:13.000Z</published>
    <updated>2022-03-31T08:03:31.481Z</updated>
    
    <content type="html"><![CDATA[<p>声明：</p><p>所有设计模式均是学习借鉴自《大话设计模式》</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式又称为静态工厂模式，实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。</p><h2 id="实例—–计算器"><a href="#实例—–计算器" class="headerlink" title="实例—–计算器"></a>实例—–计算器</h2><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="/2022/03/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82UML.jpg"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="父类Operation"><a href="#父类Operation" class="headerlink" title="父类Operation"></a>父类Operation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> _numberA = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> _numberB = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">get_numberA</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _numberA;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">get_numberB</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> _numberB;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set_numberA</span><span class="hljs-params">(<span class="hljs-keyword">double</span> _numberA)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._numberA = _numberA;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set_numberB</span><span class="hljs-params">(<span class="hljs-keyword">double</span> _numberB)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._numberB = _numberB;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">double</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="子类OperationXXX"><a href="#子类OperationXXX" class="headerlink" title="子类OperationXXX"></a>子类OperationXXX</h4><p>子类都是继承自父类，是具体的运算类</p><p>OperationAdd</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationAdd</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> result = <span class="hljs-number">0</span>;<br>        result = get_numberA()+get_numberB();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OperationSub</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationSub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> result = <span class="hljs-number">0</span>;<br>        result = get_numberA()-get_numberB();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OperationMul</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationMul</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> result = <span class="hljs-number">0</span>;<br>        result = get_numberA()*get_numberB();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>OperationDiv</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationDiv</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Operation</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">double</span> result = <span class="hljs-number">0</span>;<br>        result = get_numberA()/get_numberB();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="简单工厂类OperationFactory"><a href="#简单工厂类OperationFactory" class="headerlink" title="简单工厂类OperationFactory"></a>简单工厂类OperationFactory</h4><p>用一个单独的类做创造实力的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span> 实例化对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OperationFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Operation <span class="hljs-title">createOperate</span><span class="hljs-params">(String operate)</span></span>&#123;<br>        Operation operation = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">switch</span> (operate)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                operation = <span class="hljs-keyword">new</span> OperationAdd();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                operation =<span class="hljs-keyword">new</span> OperationSub();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                operation =<span class="hljs-keyword">new</span> OperationMul();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                operation =<span class="hljs-keyword">new</span> OperationDiv();<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> operation;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JerryWu</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2022/3/29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@desc</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Operation operation = <span class="hljs-keyword">null</span>;<br>        Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入运算符&quot;</span>);<br>        String operate = scanner.nextLine();<br>        operation = OperationFactory.createOperate(operate);<br>        System.out.println(<span class="hljs-string">&quot;请输入第一个数&quot;</span>);<br>        <span class="hljs-keyword">double</span> _numberA = scanner.nextDouble();<br>        System.out.println(<span class="hljs-string">&quot;请输入第二个数&quot;</span>);<br>        <span class="hljs-keyword">double</span> _numberB = scanner.nextDouble();<br>        operation.set_numberA(_numberA);<br>        operation.set_numberB(_numberB);<br>        <span class="hljs-keyword">double</span> result = operation.getResult();<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;声明：&lt;/p&gt;
&lt;p&gt;所有设计模式均是学习借鉴自《大话设计模式》&lt;/p&gt;
&lt;h2 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h2&gt;&lt;p&gt;简单工厂模式又称为静态工厂模</summary>
      
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>创建springboot项目</title>
    <link href="http://example.com/2022/02/16/%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/"/>
    <id>http://example.com/2022/02/16/%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-02-15T17:36:28.000Z</published>
    <updated>2022-02-15T17:36:54.466Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新建模板"><a href="#新建模板" class="headerlink" title="新建模板"></a>新建模板</h3><p>选择Spring Initializr<br>Service URL 选择</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>start.spring.io<br></code></pre></td></tr></table></figure><p>点击next</p><h3 id="Project-Metadata"><a href="#Project-Metadata" class="headerlink" title="Project Metadata"></a>Project Metadata</h3><p>根据项目的实际情况填写项目信息</p><p>点击next</p><h3 id="选择依赖"><a href="#选择依赖" class="headerlink" title="选择依赖"></a>选择依赖</h3><p>选择springboot版本</p><p>根据需要选择依赖</p><p>点击下一步</p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>确定项目名称<br>选择保存路径等<br>点击finish</p><p>一个springboot项目创建完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;新建模板&quot;&gt;&lt;a href=&quot;#新建模板&quot; class=&quot;headerlink&quot; title=&quot;新建模板&quot;&gt;&lt;/a&gt;新建模板&lt;/h3&gt;&lt;p&gt;选择Spring Initializr&lt;br&gt;Service URL 选择&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>南京中孚java开发-面经</title>
    <link href="http://example.com/2021/08/19/%E5%8D%97%E4%BA%AC%E4%B8%AD%E5%AD%9A-%E9%9D%A2%E7%BB%8F/"/>
    <id>http://example.com/2021/08/19/%E5%8D%97%E4%BA%AC%E4%B8%AD%E5%AD%9A-%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-08-19T06:59:50.000Z</published>
    <updated>2021-08-19T07:30:27.538Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>线程池中有哪些参数，有什么作用？</p><p>（漏说了一个threadFactory）</p></li><li><p>说说你熟悉的linux常用命令</p></li><li><p>二叉树有了解吗，二叉树有什么缺点？</p></li><li><p>相比于红黑树，b树，它们又有什么区别</p><ul><li>直接说了不了解</li></ul></li><li><p>说一下HashMap的实现</p></li><li><p>说到hashcode，那hashcode值相等，他们的equals比较结果是不是也是相等的。</p><ul><li>哈希冲突</li></ul></li><li><p>那反过来呢，equals相等，hascode是不是也是相等的？</p></li></ul><p>计算机网络和网络安全部分是面试官根据我的简历问的，不影响</p><ul><li>计算机网络部分<ul><li>TCP和UDP有什么区别？</li><li>TCP为什么是安全传输的？</li></ul></li><li>网络安全部分<ul><li>SSL/TLS协议的特点？</li></ul></li></ul><p>目前只回忆起这么多，后面想起来了随时更新！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;线程池中有哪些参数，有什么作用？&lt;/p&gt;
&lt;p&gt;（漏说了一个threadFactory）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;说说你熟悉的linux常用命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;二叉树有了解吗，二叉树有什么缺点？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="面经" scheme="http://example.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="http://example.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>AOP</title>
    <link href="http://example.com/2021/08/17/AOP/"/>
    <id>http://example.com/2021/08/17/AOP/</id>
    <published>2021-08-17T13:25:31.000Z</published>
    <updated>2021-08-19T04:48:44.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-AOP是什么"><a href="#1-AOP是什么" class="headerlink" title="1 AOP是什么"></a>1 AOP是什么</h2><p>Sping AOP</p><p>Aspect Oriented Programming</p><p>面向切面编程，利用AOP对业务逻辑直接进行隔离，以此来降低业务逻辑之间的耦合度，即为解耦。同时也是为了提升程序复用性，提高开发效率。</p><h2 id="2-AOP原理"><a href="#2-AOP原理" class="headerlink" title="2 AOP原理"></a>2 AOP原理</h2><p>AOP底层原理使用的是动态代理。</p><p>动态代理有两种情况</p><ul><li>有接口的情况</li><li>无接口的情况</li></ul><h3 id="2-1-有接口"><a href="#2-1-有接口" class="headerlink" title="2.1 有接口"></a>2.1 有接口</h3><p>即被代理类实现了接口</p><p>该情况使用的是jdk动态代理，创建接口实现类的代理对象</p><h3 id="2-2-无接口"><a href="#2-2-无接口" class="headerlink" title="2.2 无接口"></a>2.2 无接口</h3><p>即被代理类本身没有实现接口</p><p>使用的是CGLIB动态代理，创建子类的代理对象</p><h3 id="2-3-静态代理"><a href="#2-3-静态代理" class="headerlink" title="2.3 静态代理"></a>2.3 静态代理</h3><p>静态代理的最大缺陷是不够灵活，因为代理的对象，需要程序员自己提前编译好。</p><p>为了解决这一问题衍生出了动态代理，动态代理基于反射。</p><h3 id="2-4-动态代理"><a href="#2-4-动态代理" class="headerlink" title="2.4 动态代理"></a>2.4 动态代理</h3><p>作者这里以一个例子说明，只提供实现类、接口及方法，具体代码不重要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此接口表示出租，房东或出租物品的人需要实现这个接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span></span>&#123;<br>    <span class="hljs-comment">//此方法表示出租某物</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rentSth</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//房东</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Landlord</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">//中介  作为将要解释的代理</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Intermediary</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rentSth</span><span class="hljs-params">()</span></span>&#123;<br>        rent.rentSth();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Rent <span class="hljs-title">rent</span><span class="hljs-params">(Rent rent)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Intermediary</span><span class="hljs-params">(Rent rent)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.rent = rent;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>动态代理生成器</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> GenerateX&#123;<br> public static void main(String<span class="hljs-literal">[]</span> args)&#123;<br><span class="hljs-comment">// Proxy -- 代理 利用jdk自带的代理类   生成器  生成一个中介，相关参数解释在下方</span><br>    Rent rent = (Rent) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(ClassLoader()</span>.get<span class="hljs-constructor">SystemClassLoader()</span>,<span class="hljs-keyword">new</span> Class<span class="hljs-literal">[]</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Rent</span>.</span></span><span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-constructor">InvocationHandlerImpl()</span>);<br>    rent.rent<span class="hljs-constructor">Sth()</span>;<br>    <span class="hljs-comment">//这个时候房东通过中介出租房子的工作就已经完成了</span><br>    <br>    <span class="hljs-comment">//此处看似实例化的是被代理类（房东），但实际上将相关事务交给了InvocationImpl（中介）去完成</span><br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>处理器的实现类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvocationHandlerImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">InvocationHandler</span></span>&#123;<br>   Rent rent = <span class="hljs-keyword">new</span> Rent();<br> <span class="hljs-comment">// 相关参数解释在下方  </span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">Object</span> <span class="hljs-function"><span class="hljs-title">invoke</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> proxy, Method method, <span class="hljs-built_in">Object</span>[] args</span>)</span>&#123;<br>   rent.rentSth();<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(ClassLoader <span class="hljs-params">loader</span>,Class&lt;?&gt;[] <span class="hljs-params">interface</span>,InvocationHandler <span class="hljs-params">h</span>)</span><br></code></pre></td></tr></table></figure><p>参数解释</p><ul><li><p>ClassLoader loader：类加载器，所有的类在被加载的时候都需要提供类加载器，若需要生成的是一个普通类，可以使用java默认的applicationClassLoader即可。ClassLoader().getSystemClassLoader(),通过这个方法获取的加载器是jvm默认的类加载器</p></li><li><p>Class&lt;?&gt;[] interface: 被代理对象的class对象，由于代理对象可以同时代理多个类，所以传值时使用数组。</p></li><li><p>InvocationHandler h: 代理的行为处理器，即代理类的行为职责，需要为代理类完成的工作。</p></li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">代理需要实现的接口InvocationHandler 接口中的方法<br><span class="hljs-keyword">public</span> Object invoke(Object proxy, <span class="hljs-function"><span class="hljs-keyword">Method</span> <span class="hljs-title">method</span>, <span class="hljs-title">Object</span>[] <span class="hljs-title">args</span>)；</span><br></code></pre></td></tr></table></figure><p>参数解释</p><ul><li>Object proxy：代表代理本身，在invoke方法中尽量不要使用此参数，因为无论使用代理的何种方法，都会调用invoke方法，从而导致一个没有出口的递归调用。</li><li>Method method：通过反射对象Method判断调用的是代理的何种方法</li><li>Object[] args：调用的参数的方法</li><li>invoke的返回值即为被调用的方法的返回值</li></ul><p>如果看官有需要  可以借助字节输出流查看字节码文件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ProxyGenerator</span>.</span></span>generate<span class="hljs-constructor">ProxyClass(<span class="hljs-string">&quot;$Proxy0&quot;</span>,<span class="hljs-params">new</span> Class[]&#123;Rent.<span class="hljs-params">class</span>&#125;)</span>;<br><span class="hljs-keyword">try</span>(<br>    FileOutputStream fos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-string">&quot;d:\\$Proxy0.class&quot;</span>)</span><br>)&#123;<br>   fos.write(<span class="hljs-built_in">bytes</span>);<br>   fos.flush<span class="hljs-literal">()</span>;<br>&#125;catch(Exception e)&#123;<br>   e.printStackTrace;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-AOP-面向切面编程"><a href="#2-5-AOP-面向切面编程" class="headerlink" title="2.5 AOP 面向切面编程"></a>2.5 AOP 面向切面编程</h3><ul><li><p>通知（Advice）：指代非核心业务，如日志、安全等。需提前定义好，在想用的地方进行使用。</p></li><li><p>连接点（JoinPoint）：Spring允许使用通知的地方。每个方法的前后或异常抛出的位置，都可以当作是连接点。可以在这些位置通过代理添加通知。AspectJ甚至可以在创建bean实例和属性注入的时候添加通知。</p></li><li><p>切入点（PointCut）：切入点用来对连接点进行筛选，选中想添加通知的连接点。</p></li><li><p>切面：通知和切入点的结合。通知说明了工作的内容，工作的时间；切入点说明了工作的位置。完成这一工作的行为就是一个切面。</p></li><li><p>目标：代表需要被通知的对象（被代理），即核心业务。</p></li><li><p>引入：把定义的切面，添加到目标上的过程称为引入。</p></li><li><p>代理：AOP机制中实现功能所需要的代理模式。</p></li><li><p>织入：把切面应用到目标对象来创建新的代理对象的过程。</p></li></ul><h3 id="2-6-AOP增强类型"><a href="#2-6-AOP增强类型" class="headerlink" title="2.6 AOP增强类型"></a>2.6 AOP增强类型</h3><table><thead><tr><th>增强类型</th><th>特点</th></tr></thead><tbody><tr><td>before</td><td>前置增强，在目标方法被调用前织入增强处理</td></tr><tr><td>afterReturning</td><td>后置增强，在目标方法正常执行（不抛出异常）后，织入增强处理</td></tr><tr><td>AfterThrowing</td><td>异常抛出增强，在目标方法抛出异常后织入增强处理</td></tr><tr><td>after</td><td>最终增强，不论方法是否抛出异常，都会在目标方法最后织入增强</td></tr><tr><td>around</td><td>环绕增强，在方法目标前后都可以织入增强处理</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-AOP是什么&quot;&gt;&lt;a href=&quot;#1-AOP是什么&quot; class=&quot;headerlink&quot; title=&quot;1 AOP是什么&quot;&gt;&lt;/a&gt;1 AOP是什么&lt;/h2&gt;&lt;p&gt;Sping AOP&lt;/p&gt;
&lt;p&gt;Aspect Oriented Programming&lt;/</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="spring/springboot" scheme="http://example.com/tags/spring-springboot/"/>
    
  </entry>
  
  <entry>
    <title>some面经</title>
    <link href="http://example.com/2021/08/17/some%E9%9D%A2%E7%BB%8F/"/>
    <id>http://example.com/2021/08/17/some%E9%9D%A2%E7%BB%8F/</id>
    <published>2021-08-17T01:18:18.000Z</published>
    <updated>2021-08-17T09:30:21.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><ol><li>Mysql b树和b+树有什么区别<ul><li>索引的区别和原理 b+树           会手写</li></ul></li><li>Jvm 垃圾处理<ul><li>标记清除标记整理</li><li>引用计数和可达性分析法</li><li>年轻代和老年代</li><li>强引用软饮用弱引用虚引用</li><li>java8用的哪个垃圾收集器</li><li>垃圾回收和内存分配</li></ul></li><li>Java hashmap源码</li><li>多线程 介绍一下锁，以及java怎么保证线程安全</li><li>操作系统 介绍下虚拟内存和物理内存</li><li>计网，介绍一下三次握手 和http和https的区别</li><li>jdk7到8做了什么改变   存储一个进去他做了什么</li><li>线程池的七个参数</li><li>有几种线程池，区别是啥</li><li>volatile</li><li>Java内存模型</li><li>会问1.8的新特性有哪些</li><li>三种懒汉式单例模式</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面经&quot;&gt;&lt;a href=&quot;#面经&quot; class=&quot;headerlink&quot; title=&quot;面经&quot;&gt;&lt;/a&gt;面经&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Mysql b树和b+树有什么区别&lt;ul&gt;
&lt;li&gt;索引的区别和原理 b+树           会手写&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
    <category term="职场" scheme="http://example.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
</feed>
