<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AOP</title>
    <link href="/2021/08/17/AOP/"/>
    <url>/2021/08/17/AOP/</url>
    
    <content type="html"><![CDATA[<h2 id="1-AOP是什么"><a href="#1-AOP是什么" class="headerlink" title="1 AOP是什么"></a>1 AOP是什么</h2><p>Sping AOP</p><p>Aspect Oriented Programming</p><p>面向切面编程，利用AOP对业务逻辑直接进行隔离，以此来降低业务逻辑之间的耦合度，即为解耦。同时也是为了提升程序复用性，提高开发效率。</p><h2 id="2-AOP原理"><a href="#2-AOP原理" class="headerlink" title="2 AOP原理"></a>2 AOP原理</h2><p>AOP底层原理使用的是动态代理。</p><p>动态代理有两种情况</p><ul><li>有接口的情况</li><li>无接口的情况</li></ul><h3 id="2-1-有接口"><a href="#2-1-有接口" class="headerlink" title="2.1 有接口"></a>2.1 有接口</h3><p>该情况使用的是jdk动态代理，创建接口实现类的代理对象</p><h3 id="2-2-无接口"><a href="#2-2-无接口" class="headerlink" title="2.2 无接口"></a>2.2 无接口</h3><p>使用的是CGLIB动态代理，创建子类的代理对象</p><h3 id="2-3-静态代理"><a href="#2-3-静态代理" class="headerlink" title="2.3 静态代理"></a>2.3 静态代理</h3><p>静态代理的最大缺陷是不够灵活，因为代理的对象，需要程序员自己提前编译好。</p><p>为了解决这一问题衍生出了动态代理，动态代理基于反射。</p><h3 id="2-4-动态代理"><a href="#2-4-动态代理" class="headerlink" title="2.4 动态代理"></a>2.4 动态代理</h3><p>作者这里以一个例子说明，只提供实现类、接口及方法，具体代码不重要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此接口表示出租，房东或出租物品的人需要实现这个接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span></span>&#123;<br>    <span class="hljs-comment">//此方法表示出租某物</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rentSth</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-comment">//房东</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Landlord</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><span class="hljs-comment">//中介  作为将要解释的代理</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Intermediary</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rentSth</span><span class="hljs-params">()</span></span>&#123;<br>        rent.rentSth();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Rent <span class="hljs-title">rent</span><span class="hljs-params">(Rent rent)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Intermediary</span><span class="hljs-params">(Rent rent)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.rent = rent;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>动态代理生成器</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> GenerateX&#123;<br> public static void main(String<span class="hljs-literal">[]</span> args)&#123;<br><span class="hljs-comment">// Proxy -- 代理 利用jdk自带的代理类   生成器  生成一个中介，相关参数解释在下方</span><br>    Rent rent = (Rent) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(ClassLoader()</span>.get<span class="hljs-constructor">SystemClassLoader()</span>,<span class="hljs-keyword">new</span> Class<span class="hljs-literal">[]</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Rent</span>.</span></span><span class="hljs-keyword">class</span>&#125;,<span class="hljs-keyword">new</span> <span class="hljs-constructor">InvocationHandlerImpl()</span>);<br>    rent.rent<span class="hljs-constructor">Sth()</span>;<br>    <span class="hljs-comment">//这个时候房东通过中介出租房子的工作就已经完成了</span><br>    <br>    <span class="hljs-comment">//此处看似实例化的是被代理类（房东），但实际上将相关事务交给了InvocationImpl（中介）去完成</span><br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>处理器的实现类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvocationHandlerImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">InvocationHandler</span></span>&#123;<br>   Rent rent = <span class="hljs-keyword">new</span> Rent();<br> <span class="hljs-comment">// 相关参数解释在下方  </span><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">Object</span> <span class="hljs-function"><span class="hljs-title">invoke</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> proxy, Method method, <span class="hljs-built_in">Object</span>[] args</span>)</span>&#123;<br>   rent.rentSth();<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(ClassLoader <span class="hljs-params">loader</span>,Class&lt;?&gt;[] <span class="hljs-params">interface</span>,InvocationHandler <span class="hljs-params">h</span>)</span><br></code></pre></td></tr></table></figure><p>参数解释</p><ul><li><p>ClassLoader loader：类加载器，所有的类在被加载的时候都需要提供类加载器，若需要生成的是一个普通类，可以使用java默认的applicationClassLoader即可。ClassLoader().getSystemClassLoader(),通过这个方法获取的加载器是jvm默认的类加载器</p></li><li><p>Class&lt;?&gt;[] interface: 被代理对象的class对象，由于代理对象可以同时代理多个类，所以传值时使用数组。</p></li><li><p>InvocationHandler h: 代理的行为处理器，即代理类的行为职责，需要为代理类完成的工作。</p></li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">代理需要实现的接口InvocationHandler 接口中的方法<br><span class="hljs-keyword">public</span> Object invoke(Object proxy, <span class="hljs-function"><span class="hljs-keyword">Method</span> <span class="hljs-title">method</span>, <span class="hljs-title">Object</span>[] <span class="hljs-title">args</span>)；</span><br></code></pre></td></tr></table></figure><p>参数解释</p><ul><li>Object proxy：代表代理本身，在invoke方法中尽量不要使用此参数，因为无论使用代理的何种方法，都会调用invoke方法，从而导致一个没有出口的递归调用。</li><li>Method method：通过反射对象Method判断调用的是代理的何种方法</li><li>Object[] args：调用的参数的方法</li><li>invoke的返回值即为被调用的方法的返回值</li></ul><p>如果看官有需要  可以借助字节输出流查看字节码文件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">byte<span class="hljs-literal">[]</span> <span class="hljs-built_in">bytes</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ProxyGenerator</span>.</span></span>generate<span class="hljs-constructor">ProxyClass(<span class="hljs-string">&quot;$Proxy0&quot;</span>,<span class="hljs-params">new</span> Class[]&#123;Rent.<span class="hljs-params">class</span>&#125;)</span>;<br><span class="hljs-keyword">try</span>(<br>    FileOutputStream fos = <span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-string">&quot;d:\\$Proxy0.class&quot;</span>)</span><br>)&#123;<br>   fos.write(<span class="hljs-built_in">bytes</span>);<br>   fos.flush<span class="hljs-literal">()</span>;<br>&#125;catch(Exception e)&#123;<br>   e.printStackTrace;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>spring/springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>some面经</title>
    <link href="/2021/08/17/some%E9%9D%A2%E7%BB%8F/"/>
    <url>/2021/08/17/some%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><ol><li>Mysql b树和b+树有什么区别<ul><li>索引的区别和原理 b+树           会手写</li></ul></li><li>Jvm 垃圾处理<ul><li>标记清除标记整理</li><li>引用计数和可达性分析法</li><li>年轻代和老年代</li><li>强引用软饮用弱引用虚引用</li><li>java8用的哪个垃圾收集器</li><li>垃圾回收和内存分配</li></ul></li><li>Java hashmap源码</li><li>多线程 介绍一下锁，以及java怎么保证线程安全</li><li>操作系统 介绍下虚拟内存和物理内存</li><li>计网，介绍一下三次握手 和http和https的区别</li><li>jdk7到8做了什么改变   存储一个进去他做了什么</li><li>线程池的七个参数</li><li>有几种线程池，区别是啥</li><li>volatile</li><li>Java内存模型</li><li>会问1.8的新特性有哪些</li><li>三种懒汉式单例模式</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>职场</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
